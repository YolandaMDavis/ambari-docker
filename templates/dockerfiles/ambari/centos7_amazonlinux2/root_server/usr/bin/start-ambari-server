#!/usr/bin/env python2
from __future__ import print_function

import os
import signal
import subprocess
import sys
import time

import psutil
import requests

SERVER_PID_FILE = "/var/run/ambari-server/ambari-server.pid"
SERVER_INSTALLED = os.environ.get("AMBARI_SERVER_INSTALLED", "false") == "true"


def _pid_from_file(file_path):
    return int(open(file_path, "r").read().strip())


def info(message):
    print("[INFO] {message}".format(message=message))
    sys.stdout.flush()


def error(message):
    print("[ERROR] {message}".format(message=message))
    sys.stdout.flush()


def execute_process(cmd, env=None, do_color=False, color='\033[92m'):
    proc = subprocess.Popen(
        cmd,
        shell=True,
        env=env,
        stderr=subprocess.STDOUT,
        stdout=sys.stdout
    )

    if do_color:
        sys.stdout.write(color)
        sys.stdout.flush()

    proc.communicate()

    if do_color:
        sys.stdout.write("\x1b[0m")
        sys.stdout.flush()

    return proc.returncode


def run_cmd(*args, **kwargs):
    try:
        return subprocess.check_call(*args, **kwargs), 0
    except subprocess.CalledProcessError as e:
        return e.output, e.returncode


def wait_for_url(url, retries=60):
    while retries != 0:
        try:
            _ = requests.get(url)
            return
        except:
            time.sleep(1)
            retries -= 1
    raise Exception("Url not available")


def start_ambari_server_process():
    info("About to start ambari-server...")
    code = execute_process("ambari-server start", do_color=True)
    if code != 0:
        wait_for_url("http://localhost:8080")
    process = psutil.Process(pid=_pid_from_file(SERVER_PID_FILE))
    info("Ambari server started")
    return process


def stop_ambari_server_process():
    info("About to stop ambari-server...")
    code = execute_process("ambari-server stop", do_color=True)
    info("Ambari server gracefully stopped")


if __name__ == "__main__":
    def stop_handler(_, __):
        stop_ambari_server_process()
        sys.exit(0)


    signal.signal(signal.SIGTERM, stop_handler)
    signal.signal(signal.SIGINT, stop_handler)

    server_process = start_ambari_server_process()
    server_process.wait()

    error("Server stopped externally")
    sys.exit(1)

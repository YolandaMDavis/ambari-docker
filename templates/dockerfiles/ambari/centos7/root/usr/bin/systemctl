#!/usr/bin/env python2
from __future__ import print_function
import sys
import subprocess

PG_ENV = {
    "PGDATA": "/var/lib/pgsql/data",
    "PGPORT": "5432"
}

STATUS_CMD = 'su postgres -c "/usr/bin/pg_ctl status -D ${PGDATA}"'
START_CMD = 'su postgres -c "/usr/bin/postgresql-check-db-dir ${PGDATA} && /usr/bin/pg_ctl start -D ${PGDATA} -s -o \\"-p ${PGPORT}\\" -w -t 300 > /tmp/pgsql.log"'
# note "> /tmp/pgsql.log", we need this because of sick "feature" of pg_ctl, it will pass your stdout to background process
# causing subprocess.check_output hangs with zombie su process :)
STOP_CMD = 'su postgres -c "/usr/bin/pg_ctl stop -D ${PGDATA} -s -m fast"'
RELOAD_CMD = 'su postgres -c "/usr/bin/pg_ctl reload -D ${PGDATA} -s"'


def run(cmd, env=None):
    proc = subprocess.Popen(
        cmd,
        shell=True,
        env=env,
        stderr=subprocess.STDOUT,
        stdout=subprocess.PIPE
    )
    out, _ = proc.communicate()
    return out.decode(), proc.returncode


def pg_sql_show_env(_):
    print("Environment=PGPORT=5432")
    print("Environment=PGDATA=/var/lib/pgsql/data")
    sys.exit(0)


def pg_sql_status(_):
    output, code = run(STATUS_CMD, PG_ENV)
    if "pg_ctl: no server running" in output:
        print("stopped")
        sys.exit(3)
    if "pg_ctl: server is running" in output:
        print("running")
        sys.exit(0)


def pg_sql_start(_):
    output, code = run(START_CMD, PG_ENV)
    if code == 0:
        sys.exit(0)
    else:
        print(output)
        sys.exit(3)


def pg_sql_stop(_):
    output, code = run(STOP_CMD, PG_ENV)
    if code == 0:
        sys.exit(0)
    else:
        if "PID file" in output and "does not exist" in output:
            sys.exit(0)
        else:
            print(output)
            sys.exit(3)


def pg_sql_reload(_):
    output, code = run(RELOAD_CMD, PG_ENV)
    if code == 0:
        sys.exit(0)
    else:
        print(output)
        sys.exit(3)


def default_error(args):
    print("systemctl wrapper does not support arguments {args}".format(args=args))
    sys.exit(-1)


ARGS_MAP = {
    ('show', '-p', 'Environment', 'postgresql.service'): pg_sql_show_env,
    ('status', 'postgresql'): pg_sql_status,
    ('start', 'postgresql'): pg_sql_start,
    ('stop', 'postgresql'): pg_sql_stop,
    ('reload', 'postgresql'): pg_sql_reload
}
# TODO add mock for "service chronyd status" command
if __name__ == "__main__":
    args = sys.argv[1:]
    ARGS_MAP.get(tuple(args), default_error)(args)

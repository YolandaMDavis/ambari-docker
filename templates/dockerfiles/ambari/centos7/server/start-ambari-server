#!/usr/bin/env python
from __future__ import print_function

import os
import signal
import subprocess
import sys
import time

import psutil
import requests

AGENT_PID_FILE = "/var/run/ambari-agent/ambari-agent.pid"
SERVER_PID_FILE = "/var/run/ambari-server/ambari-server.pid"

SERVER_INSTALLED = os.environ.get("AMBARI_SERVER_INSTALLED", "false") == "true"
AGENT_INSTALLED = os.environ.get("AMBARI_AGENT_INSTALLED", "false") == "true"


def _pid_from_file(file_path):
    return int(open(file_path, "r").read().strip())


def info(message):
    print("[INFO] {message}".format(message=message))
    sys.stdout.flush()


def error(message):
    print("[ERROR] {message}".format(message=message))
    sys.stdout.flush()


def run_cmd(*args, **kwargs):
    try:
        return subprocess.check_call(*args, **kwargs), 0
    except subprocess.CalledProcessError as e:
        return e.output, e.returncode


def wait_for_url(url, retries=60):
    while retries != 0:
        try:
            _ = requests.get(url)
            return
        except:
            time.sleep(1)
            retries -= 1
    raise Exception("Url not available")


def start_ambari_agent_process():
    result, code = run_cmd("ambari-agent start", shell=True, stderr=subprocess.STDOUT)
    process = psutil.Process(pid=_pid_from_file(AGENT_PID_FILE))
    return process


def start_ambari_server_process():
    info("About to start ambari-server...")
    result, code = run_cmd("ambari-server start", shell=True, stderr=subprocess.STDOUT)
    wait_for_url("http://localhost:8080")
    process = psutil.Process(pid=_pid_from_file(SERVER_PID_FILE))
    info("Ambari server started")
    return process


def stop_ambari_server_process():
    info("About to stop ambari-server...")
    result, code = run_cmd("ambari-server stop", shell=True, stderr=subprocess.STDOUT)
    info("Ambari server gracefully stopped")


if __name__ == "__main__":
    def sigterm_handler(signal, frame):
        stop_ambari_server_process()
        sys.exit(0)


    signal.signal(signal.SIGTERM, sigterm_handler)

    server_process = start_ambari_server_process()
    server_process.wait()
    error("Server stopped externally")
    sys.exit(1)
